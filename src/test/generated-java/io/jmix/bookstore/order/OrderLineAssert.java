package io.jmix.bookstore.order;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link OrderLine} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class OrderLineAssert extends AbstractObjectAssert<OrderLineAssert, OrderLine> {

  /**
   * Creates a new <code>{@link OrderLineAssert}</code> to make assertions on actual OrderLine.
   * @param actual the OrderLine we want to make assertions on.
   */
  public OrderLineAssert(OrderLine actual) {
    super(actual, OrderLineAssert.class);
  }

  /**
   * An entry point for OrderLineAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myOrderLine)</code> and get specific assertion with code completion.
   * @param actual the OrderLine we want to make assertions on.
   * @return a new <code>{@link OrderLineAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static OrderLineAssert assertThat(OrderLine actual) {
    return new OrderLineAssert(actual);
  }

  /**
   * Verifies that the actual OrderLine's createdBy is equal to the given one.
   * @param createdBy the given createdBy to compare the actual OrderLine's createdBy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's createdBy is not equal to the given one.
   */
  public OrderLineAssert hasCreatedBy(String createdBy) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting createdBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCreatedBy = actual.getCreatedBy();
    if (!Objects.deepEquals(actualCreatedBy, createdBy)) {
      failWithMessage(assertjErrorMessage, actual, createdBy, actualCreatedBy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's createdDate is equal to the given one.
   * @param createdDate the given createdDate to compare the actual OrderLine's createdDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's createdDate is not equal to the given one.
   */
  public OrderLineAssert hasCreatedDate(java.util.Date createdDate) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting createdDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualCreatedDate = actual.getCreatedDate();
    if (!Objects.deepEquals(actualCreatedDate, createdDate)) {
      failWithMessage(assertjErrorMessage, actual, createdDate, actualCreatedDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's deletedBy is equal to the given one.
   * @param deletedBy the given deletedBy to compare the actual OrderLine's deletedBy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's deletedBy is not equal to the given one.
   */
  public OrderLineAssert hasDeletedBy(String deletedBy) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting deletedBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDeletedBy = actual.getDeletedBy();
    if (!Objects.deepEquals(actualDeletedBy, deletedBy)) {
      failWithMessage(assertjErrorMessage, actual, deletedBy, actualDeletedBy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's deletedDate is equal to the given one.
   * @param deletedDate the given deletedDate to compare the actual OrderLine's deletedDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's deletedDate is not equal to the given one.
   */
  public OrderLineAssert hasDeletedDate(java.util.Date deletedDate) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting deletedDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualDeletedDate = actual.getDeletedDate();
    if (!Objects.deepEquals(actualDeletedDate, deletedDate)) {
      failWithMessage(assertjErrorMessage, actual, deletedDate, actualDeletedDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's discount is equal to the given one.
   * @param discount the given discount to compare the actual OrderLine's discount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's discount is not equal to the given one.
   */
  public OrderLineAssert hasDiscount(io.jmix.bookstore.entity.Money discount) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting discount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    io.jmix.bookstore.entity.Money actualDiscount = actual.getDiscount();
    if (!Objects.deepEquals(actualDiscount, discount)) {
      failWithMessage(assertjErrorMessage, actual, discount, actualDiscount);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's id is equal to the given one.
   * @param id the given id to compare the actual OrderLine's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's id is not equal to the given one.
   */
  public OrderLineAssert hasId(java.util.UUID id) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.UUID actualId = actual.getId();
    if (!Objects.deepEquals(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's lastModifiedBy is equal to the given one.
   * @param lastModifiedBy the given lastModifiedBy to compare the actual OrderLine's lastModifiedBy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's lastModifiedBy is not equal to the given one.
   */
  public OrderLineAssert hasLastModifiedBy(String lastModifiedBy) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastModifiedBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLastModifiedBy = actual.getLastModifiedBy();
    if (!Objects.deepEquals(actualLastModifiedBy, lastModifiedBy)) {
      failWithMessage(assertjErrorMessage, actual, lastModifiedBy, actualLastModifiedBy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's lastModifiedDate is equal to the given one.
   * @param lastModifiedDate the given lastModifiedDate to compare the actual OrderLine's lastModifiedDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's lastModifiedDate is not equal to the given one.
   */
  public OrderLineAssert hasLastModifiedDate(java.util.Date lastModifiedDate) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastModifiedDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualLastModifiedDate = actual.getLastModifiedDate();
    if (!Objects.deepEquals(actualLastModifiedDate, lastModifiedDate)) {
      failWithMessage(assertjErrorMessage, actual, lastModifiedDate, actualLastModifiedDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's order is equal to the given one.
   * @param order the given order to compare the actual OrderLine's order to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's order is not equal to the given one.
   */
  public OrderLineAssert hasOrder(Order order) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting order of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Order actualOrder = actual.getOrder();
    if (!Objects.deepEquals(actualOrder, order)) {
      failWithMessage(assertjErrorMessage, actual, order, actualOrder);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's product is equal to the given one.
   * @param product the given product to compare the actual OrderLine's product to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's product is not equal to the given one.
   */
  public OrderLineAssert hasProduct(io.jmix.bookstore.product.Product product) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting product of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    io.jmix.bookstore.product.Product actualProduct = actual.getProduct();
    if (!Objects.deepEquals(actualProduct, product)) {
      failWithMessage(assertjErrorMessage, actual, product, actualProduct);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's quantity is equal to the given one.
   * @param quantity the given quantity to compare the actual OrderLine's quantity to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's quantity is not equal to the given one.
   */
  public OrderLineAssert hasQuantity(Integer quantity) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting quantity of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualQuantity = actual.getQuantity();
    if (!Objects.deepEquals(actualQuantity, quantity)) {
      failWithMessage(assertjErrorMessage, actual, quantity, actualQuantity);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's tenant is equal to the given one.
   * @param tenant the given tenant to compare the actual OrderLine's tenant to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's tenant is not equal to the given one.
   */
  public OrderLineAssert hasTenant(String tenant) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting tenant of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTenant = actual.getTenant();
    if (!Objects.deepEquals(actualTenant, tenant)) {
      failWithMessage(assertjErrorMessage, actual, tenant, actualTenant);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's unitPrice is equal to the given one.
   * @param unitPrice the given unitPrice to compare the actual OrderLine's unitPrice to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's unitPrice is not equal to the given one.
   */
  public OrderLineAssert hasUnitPrice(io.jmix.bookstore.entity.Money unitPrice) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting unitPrice of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    io.jmix.bookstore.entity.Money actualUnitPrice = actual.getUnitPrice();
    if (!Objects.deepEquals(actualUnitPrice, unitPrice)) {
      failWithMessage(assertjErrorMessage, actual, unitPrice, actualUnitPrice);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OrderLine's version is equal to the given one.
   * @param version the given version to compare the actual OrderLine's version to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderLine's version is not equal to the given one.
   */
  public OrderLineAssert hasVersion(Integer version) {
    // check that actual OrderLine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualVersion = actual.getVersion();
    if (!Objects.deepEquals(actualVersion, version)) {
      failWithMessage(assertjErrorMessage, actual, version, actualVersion);
    }

    // return the current assertion for method chaining
    return this;
  }

}
