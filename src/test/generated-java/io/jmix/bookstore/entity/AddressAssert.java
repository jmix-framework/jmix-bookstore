package io.jmix.bookstore.entity;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link Address} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class AddressAssert extends AbstractObjectAssert<AddressAssert, Address> {

  /**
   * Creates a new <code>{@link AddressAssert}</code> to make assertions on actual Address.
   * @param actual the Address we want to make assertions on.
   */
  public AddressAssert(Address actual) {
    super(actual, AddressAssert.class);
  }

  /**
   * An entry point for AddressAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myAddress)</code> and get specific assertion with code completion.
   * @param actual the Address we want to make assertions on.
   * @return a new <code>{@link AddressAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static AddressAssert assertThat(Address actual) {
    return new AddressAssert(actual);
  }

  /**
   * Verifies that the actual Address's city is equal to the given one.
   * @param city the given city to compare the actual Address's city to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Address's city is not equal to the given one.
   */
  public AddressAssert hasCity(String city) {
    // check that actual Address we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting city of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCity = actual.getCity();
    if (!Objects.deepEquals(actualCity, city)) {
      failWithMessage(assertjErrorMessage, actual, city, actualCity);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Address's instanceName is equal to the given one.
   * @param instanceName the given instanceName to compare the actual Address's instanceName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Address's instanceName is not equal to the given one.
   */
  public AddressAssert hasInstanceName(String instanceName) {
    // check that actual Address we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting instanceName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualInstanceName = actual.getInstanceName();
    if (!Objects.deepEquals(actualInstanceName, instanceName)) {
      failWithMessage(assertjErrorMessage, actual, instanceName, actualInstanceName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Address's postCode is equal to the given one.
   * @param postCode the given postCode to compare the actual Address's postCode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Address's postCode is not equal to the given one.
   */
  public AddressAssert hasPostCode(String postCode) {
    // check that actual Address we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting postCode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualPostCode = actual.getPostCode();
    if (!Objects.deepEquals(actualPostCode, postCode)) {
      failWithMessage(assertjErrorMessage, actual, postCode, actualPostCode);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Address's street is equal to the given one.
   * @param street the given street to compare the actual Address's street to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Address's street is not equal to the given one.
   */
  public AddressAssert hasStreet(String street) {
    // check that actual Address we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting street of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualStreet = actual.getStreet();
    if (!Objects.deepEquals(actualStreet, street)) {
      failWithMessage(assertjErrorMessage, actual, street, actualStreet);
    }

    // return the current assertion for method chaining
    return this;
  }

}
