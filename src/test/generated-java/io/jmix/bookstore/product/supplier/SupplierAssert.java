package io.jmix.bookstore.product.supplier;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link Supplier} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class SupplierAssert extends AbstractObjectAssert<SupplierAssert, Supplier> {

  /**
   * Creates a new <code>{@link SupplierAssert}</code> to make assertions on actual Supplier.
   * @param actual the Supplier we want to make assertions on.
   */
  public SupplierAssert(Supplier actual) {
    super(actual, SupplierAssert.class);
  }

  /**
   * An entry point for SupplierAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(mySupplier)</code> and get specific assertion with code completion.
   * @param actual the Supplier we want to make assertions on.
   * @return a new <code>{@link SupplierAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static SupplierAssert assertThat(Supplier actual) {
    return new SupplierAssert(actual);
  }

  /**
   * Verifies that the actual Supplier's address is equal to the given one.
   * @param address the given address to compare the actual Supplier's address to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's address is not equal to the given one.
   */
  public SupplierAssert hasAddress(io.jmix.bookstore.entity.Address address) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting address of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    io.jmix.bookstore.entity.Address actualAddress = actual.getAddress();
    if (!Objects.deepEquals(actualAddress, address)) {
      failWithMessage(assertjErrorMessage, actual, address, actualAddress);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's contactName is equal to the given one.
   * @param contactName the given contactName to compare the actual Supplier's contactName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's contactName is not equal to the given one.
   */
  public SupplierAssert hasContactName(String contactName) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting contactName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualContactName = actual.getContactName();
    if (!Objects.deepEquals(actualContactName, contactName)) {
      failWithMessage(assertjErrorMessage, actual, contactName, actualContactName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's contactTitle is equal to the given one.
   * @param contactTitle the given contactTitle to compare the actual Supplier's contactTitle to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's contactTitle is not equal to the given one.
   */
  public SupplierAssert hasContactTitle(io.jmix.bookstore.entity.Title contactTitle) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting contactTitle of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    io.jmix.bookstore.entity.Title actualContactTitle = actual.getContactTitle();
    if (!Objects.deepEquals(actualContactTitle, contactTitle)) {
      failWithMessage(assertjErrorMessage, actual, contactTitle, actualContactTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's cooperationStatus is equal to the given one.
   * @param cooperationStatus the given cooperationStatus to compare the actual Supplier's cooperationStatus to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's cooperationStatus is not equal to the given one.
   */
  public SupplierAssert hasCooperationStatus(CooperationStatus cooperationStatus) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cooperationStatus of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    CooperationStatus actualCooperationStatus = actual.getCooperationStatus();
    if (!Objects.deepEquals(actualCooperationStatus, cooperationStatus)) {
      failWithMessage(assertjErrorMessage, actual, cooperationStatus, actualCooperationStatus);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's createdBy is equal to the given one.
   * @param createdBy the given createdBy to compare the actual Supplier's createdBy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's createdBy is not equal to the given one.
   */
  public SupplierAssert hasCreatedBy(String createdBy) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting createdBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCreatedBy = actual.getCreatedBy();
    if (!Objects.deepEquals(actualCreatedBy, createdBy)) {
      failWithMessage(assertjErrorMessage, actual, createdBy, actualCreatedBy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's createdDate is equal to the given one.
   * @param createdDate the given createdDate to compare the actual Supplier's createdDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's createdDate is not equal to the given one.
   */
  public SupplierAssert hasCreatedDate(java.util.Date createdDate) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting createdDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualCreatedDate = actual.getCreatedDate();
    if (!Objects.deepEquals(actualCreatedDate, createdDate)) {
      failWithMessage(assertjErrorMessage, actual, createdDate, actualCreatedDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's deletedBy is equal to the given one.
   * @param deletedBy the given deletedBy to compare the actual Supplier's deletedBy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's deletedBy is not equal to the given one.
   */
  public SupplierAssert hasDeletedBy(String deletedBy) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting deletedBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDeletedBy = actual.getDeletedBy();
    if (!Objects.deepEquals(actualDeletedBy, deletedBy)) {
      failWithMessage(assertjErrorMessage, actual, deletedBy, actualDeletedBy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's deletedDate is equal to the given one.
   * @param deletedDate the given deletedDate to compare the actual Supplier's deletedDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's deletedDate is not equal to the given one.
   */
  public SupplierAssert hasDeletedDate(java.util.Date deletedDate) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting deletedDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualDeletedDate = actual.getDeletedDate();
    if (!Objects.deepEquals(actualDeletedDate, deletedDate)) {
      failWithMessage(assertjErrorMessage, actual, deletedDate, actualDeletedDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's email is equal to the given one.
   * @param email the given email to compare the actual Supplier's email to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's email is not equal to the given one.
   */
  public SupplierAssert hasEmail(String email) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting email of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualEmail = actual.getEmail();
    if (!Objects.deepEquals(actualEmail, email)) {
      failWithMessage(assertjErrorMessage, actual, email, actualEmail);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's id is equal to the given one.
   * @param id the given id to compare the actual Supplier's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's id is not equal to the given one.
   */
  public SupplierAssert hasId(java.util.UUID id) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.UUID actualId = actual.getId();
    if (!Objects.deepEquals(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's lastModifiedBy is equal to the given one.
   * @param lastModifiedBy the given lastModifiedBy to compare the actual Supplier's lastModifiedBy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's lastModifiedBy is not equal to the given one.
   */
  public SupplierAssert hasLastModifiedBy(String lastModifiedBy) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastModifiedBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLastModifiedBy = actual.getLastModifiedBy();
    if (!Objects.deepEquals(actualLastModifiedBy, lastModifiedBy)) {
      failWithMessage(assertjErrorMessage, actual, lastModifiedBy, actualLastModifiedBy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's lastModifiedDate is equal to the given one.
   * @param lastModifiedDate the given lastModifiedDate to compare the actual Supplier's lastModifiedDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's lastModifiedDate is not equal to the given one.
   */
  public SupplierAssert hasLastModifiedDate(java.util.Date lastModifiedDate) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastModifiedDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualLastModifiedDate = actual.getLastModifiedDate();
    if (!Objects.deepEquals(actualLastModifiedDate, lastModifiedDate)) {
      failWithMessage(assertjErrorMessage, actual, lastModifiedDate, actualLastModifiedDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's name is equal to the given one.
   * @param name the given name to compare the actual Supplier's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's name is not equal to the given one.
   */
  public SupplierAssert hasName(String name) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.deepEquals(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's phone is equal to the given one.
   * @param phone the given phone to compare the actual Supplier's phone to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's phone is not equal to the given one.
   */
  public SupplierAssert hasPhone(String phone) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting phone of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualPhone = actual.getPhone();
    if (!Objects.deepEquals(actualPhone, phone)) {
      failWithMessage(assertjErrorMessage, actual, phone, actualPhone);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's version is equal to the given one.
   * @param version the given version to compare the actual Supplier's version to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's version is not equal to the given one.
   */
  public SupplierAssert hasVersion(Integer version) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualVersion = actual.getVersion();
    if (!Objects.deepEquals(actualVersion, version)) {
      failWithMessage(assertjErrorMessage, actual, version, actualVersion);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Supplier's website is equal to the given one.
   * @param website the given website to compare the actual Supplier's website to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Supplier's website is not equal to the given one.
   */
  public SupplierAssert hasWebsite(String website) {
    // check that actual Supplier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting website of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualWebsite = actual.getWebsite();
    if (!Objects.deepEquals(actualWebsite, website)) {
      failWithMessage(assertjErrorMessage, actual, website, actualWebsite);
    }

    // return the current assertion for method chaining
    return this;
  }

}
