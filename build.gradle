plugins {
    id 'io.jmix' version '1.4.0'
    id 'java'
    id "com.github.fhermansson.assertj-generator" version "1.1.4"
}


assertjGenerator {
    classOrPackageNames = [
            'io.jmix.bookstore.order.Order',
            'io.jmix.bookstore.order.OrderLine',
            'io.jmix.bookstore.product.Product',
            'io.jmix.bookstore.product.supplier.Supplier',
            'io.jmix.bookstore.product.ProductCategory',
            'io.jmix.bookstore.product.ProductPrice',
            'io.jmix.bookstore.customer.Customer',
            'io.jmix.bookstore.fulfillment.FulfillmentCenter',
            'io.jmix.bookstore.entity.Address',
            'io.jmix.bookstore.entity.Money',
    ]
}

apply plugin: 'org.springframework.boot'

jmix {
    bomVersion = '1.4.1'
    projectId = 'bookstore'
}

group = 'io.jmix'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url 'https://global.repo.jmix.io/repository/public'
    }
    maven {
        url = 'https://global.repo.jmix.io/repository/premium'
        credentials {
            username(rootProject.hasProperty('premiumRepoUser') ?
                    rootProject['premiumRepoUser'] : System.getenv('PREMIUM_REPO_USER'))
            password(rootProject.hasProperty('premiumRepoPass') ?
                    rootProject['premiumRepoPass'] : System.getenv('PREMIUM_REPO_PASS'))
        }
    }
}

dependencies {
    implementation 'io.jmix.core:jmix-core-starter'
    implementation 'io.jmix.data:jmix-eclipselink-starter'
    implementation 'io.jmix.ui:jmix-ui-starter'
    implementation 'io.jmix.ui:jmix-ui-data-starter'
    implementation 'io.jmix.security:jmix-security-starter'
    implementation 'io.jmix.security:jmix-security-ui-starter'
    implementation 'io.jmix.security:jmix-security-data-starter'
    implementation 'io.jmix.localfs:jmix-localfs-starter'
    implementation 'io.jmix.datatools:jmix-datatools-starter'
    implementation 'io.jmix.datatools:jmix-datatools-ui-starter'

    implementation 'org.springframework.boot:spring-boot-starter-web'

    runtimeOnly 'org.hsqldb:hsqldb'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    implementation 'io.jmix.bpm:jmix-bpm-ui-starter'
    implementation 'io.jmix.bpm:jmix-bpm-starter'
    implementation 'io.jmix.reports:jmix-reports-ui-starter'
    implementation 'io.jmix.reports:jmix-reports-starter'
    implementation 'io.jmix.reports:jmix-reports-rest-starter'

    // Test Data generation
    implementation 'net.datafaker:datafaker:1.6.0'


    // Testing
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.mapstruct:mapstruct:1.5.3.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    testImplementation 'io.jmix.ui:jmix-ui-test-assist'

    // used for tests that check @Async annotated methods
    testImplementation 'org.awaitility:awaitility:4.2.0'

    themes 'io.jmix.ui:jmix-ui-themes'
    implementation 'io.jmix.ui:jmix-ui-themes'
    implementation 'io.jmix.notifications:jmix-notifications-starter'
    implementation 'io.jmix.notifications:jmix-notifications-ui-starter'
    implementation 'io.jmix.email:jmix-email-starter'
    implementation 'io.jmix.email:jmix-email-ui-starter'
    implementation 'io.jmix.quartz:jmix-quartz-starter'
    implementation 'io.jmix.maps:jmix-maps-starter'
    widgets 'io.jmix.maps:jmix-maps-ui-widgets'
    widgets 'io.jmix.ui:jmix-ui-widgets'
    implementation 'io.jmix.maps:jmix-maps-ui-starter'

    // used for GeoJsonReader to parse geojson format from the LocationIQ API
    implementation 'org.locationtech.jts.io:jts-io-common:1.17.1'


}

test {
    useJUnitPlatform()
}


tasks.named("bootBuildImage") {
    imageName = "docker.io/jmix/${project.name}"

    publish = true
    docker {
        publishRegistry {
            username = System.getenv("DOCKER_HUB_LOGIN")
            password = System.getenv("DOCKER_HUB_PASSWORD")
        }
    }
}

compileWidgets {
    generate "io.jmix.bookstore.widgets.CustomWidgetSet"
    includePaths("**/io/jmix/**/widget/**", "**/io/jmix/bookstore/widgets/**")
}
